[user]

	name = minzhi
	email = quminzhi@gmail.com

[core]

	# Use custom `.gitignore` and `.gitattributes`.
	excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

[alias]

	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

  # View the current working tree status using the short format.
  s = status -s

  # List conflict files
  cf = diff --name-only --diff-filter=U

  # Show the diff between the latest commit and the current state.
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules.
	p = pull --recurse-submodules

  # Clone a repository including all submodules.
  c = clone --recursive

  # Commit all changes.
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  
  # Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

  # List aliases.
  aliases = config --get-regexp alias

  # Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f" 

[pager]
  log = false
  branch = false

[apply]
# Detect whitespace errors when applying a patch.
  whitespace = fix

[init]
	defaultBranch = main
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
